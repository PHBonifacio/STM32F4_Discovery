
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010584  2**0
                  CONTENTS
  7 .bss          000000b8  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000b8  200000b8  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010584  2**0
                  CONTENTS, READONLY
 10 .debug_info   000032e5  00000000  00000000  000105b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000007c5  00000000  00000000  00013899  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000318  00000000  00000000  00014060  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  00014378  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000019a1  00000000  00000000  00014638  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000017df  00000000  00000000  00015fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000177b8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000b38  00000000  00000000  00017834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08000564 	.word	0x08000564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	08000564 	.word	0x08000564

080001d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <pxCurrentTCBConst2>)
 80001d2:	6819      	ldr	r1, [r3, #0]
 80001d4:	6808      	ldr	r0, [r1, #0]
 80001d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001da:	f380 8809 	msr	PSP, r0
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f04f 0000 	mov.w	r0, #0
 80001e6:	f380 8811 	msr	BASEPRI, r0
 80001ea:	4770      	bx	lr
 80001ec:	f3af 8000 	nop.w

080001f0 <pxCurrentTCBConst2>:
 80001f0:	2000001c 	.word	0x2000001c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
	...

08000200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000200:	f3ef 8009 	mrs	r0, PSP
 8000204:	f3bf 8f6f 	isb	sy
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <pxCurrentTCBConst>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	f01e 0f10 	tst.w	lr, #16
 8000210:	bf08      	it	eq
 8000212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800021a:	6010      	str	r0, [r2, #0]
 800021c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000224:	f380 8811 	msr	BASEPRI, r0
 8000228:	f3bf 8f4f 	dsb	sy
 800022c:	f3bf 8f6f 	isb	sy
 8000230:	f000 f81a 	bl	8000268 <vTaskSwitchContext>
 8000234:	f04f 0000 	mov.w	r0, #0
 8000238:	f380 8811 	msr	BASEPRI, r0
 800023c:	bc09      	pop	{r0, r3}
 800023e:	6819      	ldr	r1, [r3, #0]
 8000240:	6808      	ldr	r0, [r1, #0]
 8000242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000246:	f01e 0f10 	tst.w	lr, #16
 800024a:	bf08      	it	eq
 800024c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000250:	f380 8809 	msr	PSP, r0
 8000254:	f3bf 8f6f 	isb	sy
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	f3af 8000 	nop.w

08000260 <pxCurrentTCBConst>:
 8000260:	2000001c 	.word	0x2000001c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop

08000268 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000268:	b480      	push	{r7}
 800026a:	b087      	sub	sp, #28
 800026c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800026e:	4b26      	ldr	r3, [pc, #152]	; (8000308 <vTaskSwitchContext+0xa0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000276:	4b25      	ldr	r3, [pc, #148]	; (800030c <vTaskSwitchContext+0xa4>)
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800027c:	e03e      	b.n	80002fc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800027e:	4b23      	ldr	r3, [pc, #140]	; (800030c <vTaskSwitchContext+0xa4>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000284:	4b22      	ldr	r3, [pc, #136]	; (8000310 <vTaskSwitchContext+0xa8>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	fab3 f383 	clz	r3, r3
 8000290:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000292:	7afb      	ldrb	r3, [r7, #11]
 8000294:	f1c3 031f 	rsb	r3, r3, #31
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	491e      	ldr	r1, [pc, #120]	; (8000314 <vTaskSwitchContext+0xac>)
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	4613      	mov	r3, r2
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	4413      	add	r3, r2
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	440b      	add	r3, r1
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d109      	bne.n	80002c2 <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80002ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002b2:	f383 8811 	msr	BASEPRI, r3
 80002b6:	f3bf 8f6f 	isb	sy
 80002ba:	f3bf 8f4f 	dsb	sy
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	e7fe      	b.n	80002c0 <vTaskSwitchContext+0x58>
 80002c2:	697a      	ldr	r2, [r7, #20]
 80002c4:	4613      	mov	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <vTaskSwitchContext+0xac>)
 80002ce:	4413      	add	r3, r2
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	3308      	adds	r3, #8
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d104      	bne.n	80002f2 <vTaskSwitchContext+0x8a>
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a07      	ldr	r2, [pc, #28]	; (8000318 <vTaskSwitchContext+0xb0>)
 80002fa:	6013      	str	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	371c      	adds	r7, #28
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	200000b4 	.word	0x200000b4
 800030c:	200000b0 	.word	0x200000b0
 8000310:	200000ac 	.word	0x200000ac
 8000314:	20000020 	.word	0x20000020
 8000318:	2000001c 	.word	0x2000001c

0800031c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
  int i = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
  {
	i++;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	e7fb      	b.n	8000326 <main+0xa>
	...

08000330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000336:	e003      	b.n	8000340 <LoopCopyDataInit>

08000338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800033a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800033c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800033e:	3104      	adds	r1, #4

08000340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000340:	480b      	ldr	r0, [pc, #44]	; (8000370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000348:	d3f6      	bcc.n	8000338 <CopyDataInit>
  ldr  r2, =_sbss
 800034a:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800034c:	e002      	b.n	8000354 <LoopFillZerobss>

0800034e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800034e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000350:	f842 3b04 	str.w	r3, [r2], #4

08000354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000358:	d3f9      	bcc.n	800034e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800035a:	f000 f82d 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800035e:	f000 f8dd 	bl	800051c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000362:	f7ff ffdb 	bl	800031c <main>
  bx  lr    
 8000366:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000368:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800036c:	08000584 	.word	0x08000584
  ldr  r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000374:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800037c:	200000b8 	.word	0x200000b8

08000380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>

08000382 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000386:	e7fe      	b.n	8000386 <HardFault_Handler+0x4>

08000388 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800038c:	e7fe      	b.n	800038c <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000392:	e7fe      	b.n	8000392 <BusFault_Handler+0x4>

08000394 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000398:	e7fe      	b.n	8000398 <UsageFault_Handler+0x4>

0800039a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4a16      	ldr	r2, [pc, #88]	; (8000418 <SystemInit+0x60>)
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <SystemInit+0x60>)
 80003c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <SystemInit+0x64>)
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <SystemInit+0x64>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <SystemInit+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003de:	4a0f      	ldr	r2, [pc, #60]	; (800041c <SystemInit+0x64>)
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <SystemInit+0x64>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <SystemInit+0x64>)
 80003f0:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <SystemInit+0x68>)
 80003f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003f4:	4a09      	ldr	r2, [pc, #36]	; (800041c <SystemInit+0x64>)
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <SystemInit+0x64>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <SystemInit+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000406:	f000 f80d 	bl	8000424 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040a:	4b03      	ldr	r3, [pc, #12]	; (8000418 <SystemInit+0x60>)
 800040c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000410:	609a      	str	r2, [r3, #8]
#endif
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	e000ed00 	.word	0xe000ed00
 800041c:	40023800 	.word	0x40023800
 8000420:	24003010 	.word	0x24003010

08000424 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000432:	4a36      	ldr	r2, [pc, #216]	; (800050c <SetSysClock+0xe8>)
 8000434:	4b35      	ldr	r3, [pc, #212]	; (800050c <SetSysClock+0xe8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800043c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800043e:	4b33      	ldr	r3, [pc, #204]	; (800050c <SetSysClock+0xe8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000446:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3301      	adds	r3, #1
 800044c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d103      	bne.n	800045c <SetSysClock+0x38>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800045a:	d1f0      	bne.n	800043e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800045c:	4b2b      	ldr	r3, [pc, #172]	; (800050c <SetSysClock+0xe8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000464:	2b00      	cmp	r3, #0
 8000466:	d002      	beq.n	800046e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000468:	2301      	movs	r3, #1
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	e001      	b.n	8000472 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d142      	bne.n	80004fe <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000478:	4a24      	ldr	r2, [pc, #144]	; (800050c <SetSysClock+0xe8>)
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <SetSysClock+0xe8>)
 800047c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000482:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000484:	4a22      	ldr	r2, [pc, #136]	; (8000510 <SetSysClock+0xec>)
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <SetSysClock+0xec>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800048e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000490:	4a1e      	ldr	r2, [pc, #120]	; (800050c <SetSysClock+0xe8>)
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <SetSysClock+0xe8>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000498:	4a1c      	ldr	r2, [pc, #112]	; (800050c <SetSysClock+0xe8>)
 800049a:	4b1c      	ldr	r3, [pc, #112]	; (800050c <SetSysClock+0xe8>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004a2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80004a4:	4a19      	ldr	r2, [pc, #100]	; (800050c <SetSysClock+0xe8>)
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <SetSysClock+0xe8>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80004ae:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <SetSysClock+0xe8>)
 80004b2:	4a18      	ldr	r2, [pc, #96]	; (8000514 <SetSysClock+0xf0>)
 80004b4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004b6:	4a15      	ldr	r2, [pc, #84]	; (800050c <SetSysClock+0xe8>)
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <SetSysClock+0xe8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004c0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004c2:	bf00      	nop
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <SetSysClock+0xe8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0f9      	beq.n	80004c4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <SetSysClock+0xf4>)
 80004d2:	f240 7205 	movw	r2, #1797	; 0x705
 80004d6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <SetSysClock+0xe8>)
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <SetSysClock+0xe8>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	f023 0303 	bic.w	r3, r3, #3
 80004e2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <SetSysClock+0xe8>)
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <SetSysClock+0xe8>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	f043 0302 	orr.w	r3, r3, #2
 80004ee:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004f0:	bf00      	nop
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <SetSysClock+0xe8>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f003 030c 	and.w	r3, r3, #12
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d1f9      	bne.n	80004f2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800
 8000510:	40007000 	.word	0x40007000
 8000514:	07405408 	.word	0x07405408
 8000518:	40023c00 	.word	0x40023c00

0800051c <__libc_init_array>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	4e0d      	ldr	r6, [pc, #52]	; (8000554 <__libc_init_array+0x38>)
 8000520:	4c0d      	ldr	r4, [pc, #52]	; (8000558 <__libc_init_array+0x3c>)
 8000522:	1ba4      	subs	r4, r4, r6
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	2500      	movs	r5, #0
 8000528:	42a5      	cmp	r5, r4
 800052a:	d109      	bne.n	8000540 <__libc_init_array+0x24>
 800052c:	4e0b      	ldr	r6, [pc, #44]	; (800055c <__libc_init_array+0x40>)
 800052e:	4c0c      	ldr	r4, [pc, #48]	; (8000560 <__libc_init_array+0x44>)
 8000530:	f000 f818 	bl	8000564 <_init>
 8000534:	1ba4      	subs	r4, r4, r6
 8000536:	10a4      	asrs	r4, r4, #2
 8000538:	2500      	movs	r5, #0
 800053a:	42a5      	cmp	r5, r4
 800053c:	d105      	bne.n	800054a <__libc_init_array+0x2e>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000544:	4798      	blx	r3
 8000546:	3501      	adds	r5, #1
 8000548:	e7ee      	b.n	8000528 <__libc_init_array+0xc>
 800054a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800054e:	4798      	blx	r3
 8000550:	3501      	adds	r5, #1
 8000552:	e7f2      	b.n	800053a <__libc_init_array+0x1e>
 8000554:	0800057c 	.word	0x0800057c
 8000558:	0800057c 	.word	0x0800057c
 800055c:	0800057c 	.word	0x0800057c
 8000560:	08000580 	.word	0x08000580

08000564 <_init>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
